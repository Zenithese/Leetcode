// Given a 2D binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.

// Example:

    // Input:
    // [
    //     ["1", "0", "1", "0", "0"],
    //     ["1", "0", "1", "1", "1"],
    //     ["1", "1", "1", "1", "1"],
    //     ["1", "0", "0", "1", "0"]
    // ]
    // Output: 6
    
var maximalRectangle = function (matrix) {

    if (matrix.length === 0) return 0; if (matrix.length <= 1 && matrix[0].length === 1) return matrix[0][0]

    let largest = 0

    for (let i = 0; i < matrix.length; i++) {
        let count = 1
        for (let j = 0; j < matrix[i].length; j++) {
            if (matrix[i][j] === "1") {
                matrix[i][j] = count++
            } else {
                matrix[i][j] = 0
                count = 1
            }
        }
    }

    for (let i = 0; i < matrix.length; i++) {
        for (let j = 0; j < matrix[i].length; j++) {
            let k = i
            let cMax = matrix[i][j]
            let maxWidth = cMax
            while (k >= 0) {
                let curr = matrix[k][j]
                if (curr === 0) break
                if (curr < maxWidth) maxWidth = curr
                cMax = Math.max(cMax, maxWidth * (i - k + 1))
                k--
            }
            largest = Math.max(largest, cMax)
        }
    }

    console.log(matrix)

    return largest

}

console.log(maximalRectangle([
    ["1", "0", "1", "1", "1"],
    ["0", "1", "0", "1", "0"],
    ["1", "1", "0", "1", "1"],
    ["1", "1", "0", "1", "1"],
    ["0", "1", "1", "1", "1"]
]))

// var maximalRectangle = function (matrix) {

//     if (matrix.length === 0) return 0; if (matrix.length <= 1 && matrix[0].length === 1) return matrix[0][0]

//     let largest = matrix[0] ? Number(matrix[0][0]) : 0

//     for (let i = 0; i < matrix.length; i++) {
//         for (let j = 0; j < matrix[i].length; j++) {
//             matrix[i][j] = [Number(matrix[i][j]), Number(matrix[i][j]), Number(matrix[i][j])]
//         }
//     }

//     for (let i = 0; i < matrix.length; i++) {
//         for (let j = 0; j < matrix[i].length; j++) {
            
//             if (matrix[i][j][0] !== 0 && matrix[i][j - 1]) {
//                 matrix[i][j][0] = matrix[i][j - 1][0] + matrix[i][j][0]
//                 largest = Math.max(largest, matrix[i][j][0])
//             } 

//             if (matrix[i][j][1] !== 0 && matrix[i - 1]) {
//                 matrix[i][j][1] = matrix[i - 1][j][1] + matrix[i][j][1]
//                 largest = Math.max(largest, matrix[i][j][1])
//             }

//             if (matrix[i][j][2] !== 0 && matrix[i][j - 1] && matrix[i - 1] && matrix[i - 1][j][1] !== 0 && matrix[i][j - 1][0] !== 0) {
//                 matrix[i][j][2] = matrix[i - 1][j - 1][2] + matrix[i][j][2]
//             } 

//             if (i !== 0 && j !== 0) {
//                 largest = Math.max(
//                     largest, 
//                     Math.min(matrix[i][j][2], matrix[i][j][0], matrix[i - 1][j][0]) * Math.min(matrix[i][j][1], matrix[i][j - 1][1])
//                 )
//                 let curr = matrix[i][j][2]
//                 if (curr < matrix[i][j][0]) {
//                     let check = curr === 0 ? 0 : curr - 1
//                     largest = Math.max(
//                         largest,
//                         curr * Math.min(matrix[i][j][0], matrix[i - check][j][0])
//                     )
//                 }

//                 // let curr = matrix[i][j][2]

//                 // let k = i
                
//                 // while (curr < matrix[k][j][0]) {
//                 //     i--
//                 // }

//                 // largest = Math.max(
//                 //     largest,
//                 //     curr * matrix[k][j][0]
//                 // )

//             }            
//         }
//     }

//     console.log(matrix)

//     return largest
    
// };

// let input = 
// [
//     ["1", "0", "1", "0", "0"],
//     ["1", "0", "1", "1", "1"],
//     ["1", "1", "1", "1", "1"],
//     ["1", "0", "0", "1", "0"]
// ]

// console.log(maximalRectangle(input))

// console.log(maximalRectangle([
//     ["0", "1", "1", "0", "1"], 
//     ["1", "1", "0", "1", "0"], 
//     ["0", "1", "1", "1", "0"], 
//     ["1", "1", "1", "1", "0"], 
//     ["1", "1", "1", "1", "1"], 
//     ["0", "0", "0", "0", "0"]
// ])) // => 9

// console.log(maximalRectangle([["0", "1"]])) // => 1

// console.log(maximalRectangle([["1", "1", "1", "1"], ["1", "1", "1", "1"], ["1", "1", "1", "1"]])) // => 12

// console.log(maximalRectangle([
//     ["1"], 
//     ["0"], 
//     ["1"], 
//     ["1"], 
//     ["1"], 
//     ["1"], 
//     ["0"]
// ])) // => 4

// console.log(maximalRectangle([
//     ["1", "0", "1", "0"], 
//     ["1", "0", "1", "1"], 
//     ["1", "0", "1", "1"], 
//     ["1", "1", "1", "1"]
// ])) // => 6

// console.log(maximalRectangle([
//     ["0", "0", "0", "0", "1", "1", "1", "0", "1"], 
//     ["0", "0", "1", "1", "1", "1", "1", "0", "1"], 
//     ["0", "0", "0", "1", "1", "1", "1", "1", "0"]])) // => 9

// console.log(maximalRectangle([
//     ["1", "0", "1", "0", "0"],
//     ["1", "0", "1", "1", "1"], 
//     ["1", "1", "1", "1", "1"],
//     ["1", "0", "0", "1", "0"]
// ])) // => 6

// console.log(maximalRectangle([
//     ["1", "1", "1", "1", "1", "1", "1", "1"], 
//     ["1", "1", "1", "1", "1", "1", "1", "0"], 
//     ["1", "1", "1", "1", "1", "1", "1", "0"],
//     ["1", "1", "1", "1", "1", "0", "0", "0"], 
//     ["0", "1", "1", "1", "1", "0", "0", "0"]
// ])) // => 21

// console.log(maximalRectangle([
//     ["1", "0", "1", "1", "0", "1"],
//     ["1", "1", "1", "1", "1", "1"], 
//     ["0", "1", "1", "0", "1", "1"], 
//     ["1", "1", "1", "0", "1", "0"], 
//     ["0", "1", "1", "1", "1", "1"], 
//     ["1", "1", "0", "1", "1", "1"]
// ])) // => 8

// console.log(maximalRectangle([["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "0", "0", "1", "1", "1", "1", "1", "1", "1", "1", "0", "0", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1"], ["1", "1", "1", "1", "0", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "0", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"], ["0", "1", "1", "1", "1", "0", "1", "0", "1", "1", "1", "1", "1", "1", "0", "1", "1", "0", "1", "1", "0", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"], ["0", "1", "0", "1", "1", "0", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "0", "1", "0", "1", "1", "0", "1", "1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "0", "1", "1", "0", "0", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "0", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "0", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1"], ["0", "1", "1", "0", "1", "1", "0", "1", "0", "1", "1", "1", "0", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "0", "1", "0", "1"], ["0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "0", "1", "1", "1", "1", "1", "1", "1", "0", "0", "1", "1", "0", "0", "1", "1", "0", "1", "1", "0", "1", "0", "1", "0", "1"], ["1", "1", "1", "1", "0", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "0", "1", "1", "0", "1", "1", "1", "1", "0", "1", "0", "1", "1", "0", "1", "0", "1", "1"], ["1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "0", "1", "1", "0", "1", "1", "1", "0", "1", "1", "1", "1", "0", "1", "1", "1", "1"], ["1", "1", "1", "0", "1", "1", "0", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"], ["1", "0", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "0", "1", "1", "1", "1", "0", "0", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"], ["0", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "0", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "0", "1", "1"], ["1", "1", "1", "1", "1", "0", "0", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "0", "1", "1", "0", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1"], ["1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "0", "0", "1", "1", "1", "1", "1", "1", "0", "0", "1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "0", "1", "1", "1"], ["1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "0", "1", "1", "1", "1", "1", "0", "0", "1", "0", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1", "1", "0", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1"], ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "0", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "0", "1", "1", "0", "1", "1"], ["1", "1", "0", "0", "0", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1", "0", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "0", "0", "1", "0", "1", "1", "1", "0", "0", "1", "1", "1", "1", "1", "1", "1", "1"], ["1", "1", "1", "0", "0", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "0", "1", "1", "1", "1", "0", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "0", "1"], ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1"], ["1", "1", "1", "0", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "0", "1", "1", "1"], ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "0", "1", "1", "1", "1", "1", "1", "0", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1"], ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "0", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "0", "1"], ["1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "0", "0", "1", "1", "1", "0", "1", "1", "0", "1", "1"], ["1", "1", "1", "1", "0", "1", "1", "0", "1", "1", "1", "1", "1", "1", "0", "1", "1", "0", "1", "1", "0", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1"], ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"], ["1", "1", "0", "0", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1"], ["1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "0", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"], ["0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "0", "1", "0", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1"], ["1", "0", "1", "1", "0", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "0", "1", "1"], ["1", "0", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "0", "1", "1", "1", "1", "1"], ["0", "1", "1", "1", "1", "0", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1"], ["0", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "0", "1", "1", "1", "1", "0", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"], ["0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "0", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "0", "1", "0", "1", "1", "0", "0", "1", "1", "1", "1", "0", "1", "1"], ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "0"], ["1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "0", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "0", "0", "1", "1", "1", "1"], ["1", "1", "0", "1", "1", "0", "1", "1", "1", "1", "1", "1", "0", "1", "0", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "0", "0", "1", "1", "1", "0", "1", "0", "1", "0", "0"], ["0", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "0", "0", "1", "1", "1", "1", "1", "0", "0", "1", "0", "1", "1", "1", "1", "1", "0", "1", "1", "1", "0", "1", "1", "0", "1", "1", "1", "0", "1"]])) // => 114



// [0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[1, 1, 1],[2, 1, 1],[3, 1, 1],[0, 0, 0],[1, 1, 1]
// [0, 0, 0],[0, 0, 0],[1, 1, 1],[2, 1, 1],[3, 2, 1],[4, 2, 2],[5, 2, 2],[0, 0, 0],[1, 2, 1]
// [0, 0, 0],[0, 0, 0],[0, 0, 0],[1, 2, 1],[2, 3, 2],[3, 3, 2],[4, 3, 3],[5, 1, 1],[0, 0, 0]

// if (!(matrix[i - 1])) {
            //     matrix[i][j][2] = matrix[i][j][0]
            // } else if (!(matrix[i][j - 1])) {
            //     matrix[i][j][2] = matrix[i][j][1]
            // } 
            // else if (matrix[i][j]) {
            //     matrix[i][j][2] = matrix[i - 1][j][1] * matrix[i][j - 1][0]
            // }
